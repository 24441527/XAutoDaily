import java.text.SimpleDateFormat

ext {
    mVersionCode = getVersionCode()
//    mVersionName = getVersionName()
    mBuildNum = getBuildNum()
    mBuildTime = getBuildTime()
    lastAvailableTime = getLastAvailableTime()
    getMVersionNameSuffix = this.&getMVersionNameSuffix
}

static Integer getVersionCode() {
    String versionCode = new SimpleDateFormat("yyMMddHH", Locale.ENGLISH).format(new Date())
    println("versionCode: " + versionCode)
    return Integer.valueOf(versionCode)
}

static String getVersionName() {
    long start = new GregorianCalendar(2020, 1 - 1, 10).getTimeInMillis()
    String days = String.valueOf((int) ((System.currentTimeMillis() - start) / (24 * 60 * 60 * 1000)))
    int length = days.length()
    String v3 = days.substring(length - 1)
    v3 = v3 == "" ? "0" : v3
    String v2 = days.substring(length - 2, length - 1)
    v2 = v2 == "" ? "0" : v2
    String v1 = days.substring(0, length - 2)
    v1 = v1 == "" ? "0" : v1
    String versionName = String.format("%s.%s.%s", v1, v2, v3)
    println("versionName: " + versionName)
    return versionName
}

static String getBuildNum() {
    return new SimpleDateFormat("MMddHH", Locale.ENGLISH).format(new Date())
}

static String getBuildTime() {
    return System.currentTimeMillis() + "L"
}

static String getMVersionNameSuffix(String suffix, Boolean showBuildNum = false) {
    if (showBuildNum) {
        return "." + getBuildNum() + "-" + suffix
    }
    return "-" + suffix
}

static String getLastAvailableTime() {
    return (System.currentTimeMillis() + 25 * 24 * 60 * 60 * 1000L) + "L"
}